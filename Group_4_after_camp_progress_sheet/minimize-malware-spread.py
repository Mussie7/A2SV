class Solution:
    def find(self, node):
        if self.rep[node] == node:
            return node
        
        # path compression
        self.rep[node] = self.find(self.rep[node])
        return self.rep[node]
    
    def union(self, node1, node2):
        rep1, rep2 = self.find(node1), self.find(node2)

        if rep1 == rep2:
            return
        
        # union by rank
        if self.rank[rep1] >= self.rank[rep2]:
            self.rep[rep2] = rep1
            self.rank[rep1] += self.rank[rep2]
        else:
            self.rep[rep1] = rep2
            self.rank[rep2] += self.rank[rep1]

    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        self.rep = [i for i in range(n)]
        self.rank = [1] * n
        for i in range(n):
            for j in range(n):
                if graph[i][j] == 1:
                    self.union(i, j)
        
        initial.sort()
        reps = defaultdict(list)
        for malware in initial:
            reps[self.find(malware)].append(malware)
        
        sorted_reps = sorted(reps.keys(), key=lambda x: self.rank[x], reverse=True)
        mal = None
        for rep in sorted_reps:
            if len(reps[rep]) == 1:
                return reps[rep][0]
        
        return initial[0]